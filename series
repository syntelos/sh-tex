#!/bin/bash
#
# Syntelos Series
# Copyright (C) 2021, John Pritchard, @syntelos
# CC-BY-NC
# This work is licensed under the Creative Commons
# Attribution-NonCommercial 4.0 International License. To view a copy
# of this license, visit
# http://creativecommons.org/licenses/by-nc/4.0/ or send a letter to
# Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
#

declare -g prog=$0
declare -g series_root=~/tex

function usage {
    cat<<EOF>&2
Syntelos series is a journal toolbox.

    series <s> circa [?]                       Current working directory.  Alt path 
                                               prefix for 
                                               <current>, <list>, and <next>.

    series <s> compile [x]                     Produce La/TeX output, default DVI.
                                               Opt 'pdf', 'ps', or 'png'.  

    series <s> current [x]                     Relative path of current file.
                                               Opt <fext> def 'tex'.

    series <s> dir [?]                         Series directory.  Alt absolute path
                                               for <circa>, <current>, <list>,
                                               or <next>.

    series <s> list                            List files in set of current.

    series <s> name                            Series directory base name.

    series <s> next [x]                        Relative path of future file.  Opt
                                               <fext> def 'tex'.

    series <s> print [x]                       Produce La/TeX output, default DVI. 
                                               Opt 'pdf', 'ps', or 'png'.

    series <s> prefix                          Series file prefix.

    series <s> batch mdb [init|list]           Series batch sequence process 
                                               begins with mdb init.

    series <s> batch mdb list [index|msg]      Series batch list is intermediate
                                               to series batch sequence.

    series <s> batch sequence                  Perform batch transformation to 
                                               sequence.

    series <s> batch index [init|list|count]   Series batch encoding begins with 
                                               index init.

    series <s> batch encode                    Series batch encode index to MP4.


Description

    Manage a TeX document series from any working directory.

Configuration

    A series might be found in directory

        ${series_root}/tex-journal

    which directory needs to be initialized (as a git repo) manually.

Structure

    Journal entry docs are found in "circa",

        ${series_root}/tex-journal/2021 ,

    during year 2021.  For example

        ${series_root}/tex-journal/2021/journal-20210101-0.tex ,

    and its output.

EOF
    exit 1
}

declare -g series_dir
declare -g series_name
declare -g series_prefix

function series_init {
    if [ -n "${1}" ]
    then

        if [ -d "${series_root}/${1}" ]
        then
            series_dir=${series_root}/${1}
            
            series_name=$(basename "${series_dir}")
            #
            # given "a/a-b", trunc "a-" from "a-b"
            #
            rep=$(basename $(dirname "${series_dir}"))

            if [ -n "$(echo ${series_name} | egrep -e ^${rep}- )" ]
            then
                series_prefix=$(echo ${series_name} | sed "s%^${rep}-%%")
            else
                series_prefix="${series_name}"
            fi
            return 0

        elif [ -d "${series_root}/tex-${1}" ]
        then
            series_dir=${series_root}/tex-${1}
            series_name=$(basename "${series_dir}")
            series_prefix="${1}"
        else
            return 1
        fi
    else
        return 1
    fi
}

declare -g series_circa=$(date +%Y)
declare -g series_today=$(date +%Y%m%d)

function series_base_tail {

    if 2>/dev/null ls ${series_dir}/${series_circa}/${series_prefix}-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]-[0-9]\.tex | sort -V | tail -n 1
    then
        return 0
    else
        return 1
    fi
}
function series_base_current {
    p="${series_prefix}-"
    d="${series_today}-"
    x="0"

    if tgt=$(series_base_tail) && [ -n "${tgt}" ]
    then

        if dx=$(echo "${tgt}" | sed "s%.*${p}%%;" | sed 's%\.[a-z][a-z][a-z]$%%;') &&[ -n "${dx}" ]
        then

            echo ${p}${dx}
            return 0
        else
            return 1
        fi
    else
        echo ${p}${d}${x}
        return 0
    fi
}

function series_file_current {

    if base=$(series_base_current) && [ -n "${base}" ]
    then
        if [ -n "${1}" ]
        then
            echo ${base}.${1}
        else
            echo ${base}.tex
        fi
        return 0
    else
        return 1
    fi
}

function series_base_next {
    p="${series_prefix}-"
    d="${series_today}-"
    x="0"

    if tgt=$(series_base_tail) && [ -n "${tgt}" ]
    then

        if z=$(echo "${tgt}" | egrep -e "/${p}${d}" | sed "s%.*/${p}${d}%%;" | sed 's%\.[a-z][a-z][a-z]$%%;') &&[ -n "${z}" ]
        then
            if z=$(( ${z} + 1 )) && [ 0 -le ${z} ]
            then

                echo ${p}${d}${z}
                return 0
            else
                return 1
            fi
        else
            echo ${p}${d}${x}
            return 0
        fi
    else
        echo ${p}${d}${x}
        return 0
    fi
}

function series_file_next {
    if base=$(series_base_next) && [ -n "${base}" ]
    then
        if [ -n "${1}" ]
        then
            echo ${base}.${1}
        else
            echo ${base}.tex
        fi
        return 0
    else
        return 1
    fi
}

function series_process_create {
    if file=$(series_file_next) && [ -n "${file}" ]
    then
        if [ ! -d ${series_dir}/${series_circa} ]
        then
            mkdir -p ${series_dir}/${series_circa}
        fi

        series_template=${series_dir}/${series_circa}/template.tex
        
        if [ -n "${TEX_SERIES_TEMPLATE}" ]
        then
            cp "${TEX_SERIES_TEMPLATE}" ${series_dir}/${series_circa}/${file}

        elif [ -f ${series_template} ]
        then
            cp ${series_template} ${series_dir}/${series_circa}/${file}
        else
            cat<<EOF>${series_dir}/${series_circa}/${file}
\input preamble

\bye
EOF
        fi

        git add ${series_dir}/${series_circa}/${file}

        series_editor=emacs

        if [ -n "${TEX_SERIES_EDITOR}" ]
        then
            "${TEX_SERIES_EDITOR}" ${series_dir}/${series_circa}/${file} &
        else
            ${series_editor} ${series_dir}/${series_circa}/${file} &
        fi

        return 0
    else
        return 1
    fi
}

function series_process_compile {
    if tex_file=$(series_file_current) && [ -n "${tex_file}" ]
    then
        dvi_file=$(echo ${tex_file} | sed 's/\.tex$/.dvi/')

        src=${series_dir}/${series_circa}/${tex_file}
        tgt=${series_dir}/${series_circa}/${dvi_file}

        if [ -n "$(egrep -e '^\\documentclass' ${src} )" ]
        then
            if [ -f "${tgt}" ]
            then
                compiler=latex

            elif [ -n "${1}" ]&&[ 'pdf' = "${1}" ]
            then
                tgt=$(echo ${src} | sed 's/\.tex$/.pdf/')
                compiler=pdflatex
            else
                tgt=$(echo ${src} | sed 's/\.tex$/.dvi/')
                compiler=latex
            fi
        else
            if [ -f "${tgt}" ]
            then
                compiler=tex

            elif [ -n "${1}" ]&&[ 'pdf' = "${1}" ]
            then
                tgt=$(echo ${src} | sed 's/\.tex$/.pdf/')
                compiler=pdftex
            else
                tgt=$(echo ${src} | sed 's/\.tex$/.dvi/')
                compiler=tex
            fi
        fi

        if ${compiler} ${src}
        then
            git add ${tgt}

            if [ -n "${1}" ]
            then
                case "${1}" in

                    pdf)
                        tgt2=$(echo ${tgt} | sed 's/\.dvi$/.pdf/')

                        if dvipdf ${tgt} ${tgt2}
                        then
                            git add ${tgt2}
                        fi
                        ;;
                    png)
                        tgt2=$(echo ${tgt} | sed 's/\.dvi$/.png/')

                        if dvipng -p '=1' -T bbox -o ${tgt2} ${tgt}
                        then
                            git add ${tgt2}
                        fi
                        ;;
                    ps)
                        tgt2=$(echo ${tgt} | sed 's/\.dvi$/.ps/')

                        if dvips -o ${tgt2} ${tgt}
                        then
                            git add ${tgt2}
                        fi
                        ;;
                esac
            fi
            return 0
        else
            return 1
        fi
    else
        return 1
    fi
}

function series_process_list {
    if base=$(series_base_current $* )
    then
        2>/dev/null ls ${series_dir}/${series_circa}/${base}.* | sed "s%${series_dir}/${series_circa}/%%;"
    else
        return 1
    fi
}

function series_batch_mdb_init {

    if rm -f m.db
    then
        #
        # enumerate batch resource (excluding target prefix)
        #
        for src in $(2>/dev/null ls | egrep -v '^[0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]-')
        do
            if msg=$(git log "${src}" | tail -n 1 | sed 's/^ *//; s/ /%/g;') &&[ -n "${msg}" ]
            then
                echo ${msg}:${src} >> m.db
            fi
        done
        #
        # order batch resource
        #
        if mv m.db /tmp/m.db
        then
            #
            lm=0; idx=0;
            #
            # index batch resource
            #
            for mre in $(cat /tmp/m.db | sed 's/ /%/g')
            do
                msg=$(echo ${mre} | awk -F: '{print $1}')
                src=$(echo ${mre} | awk -F: '{print $2}')

                if [ 0 = "${lm}" ]
                then
                    lm=${msg}

                elif [ "${lm}" != "${msg}" ]
                then
                    lm=${msg}; idx=$(( ${idx} + 1 ))
                fi
                echo ${idx}:${msg}:${src} >> m.db
            done

            return  0

        else
            cat<<EOF>&2
${prog} error: unable to sort 'm.db'.
EOF
            rm -f m.db
            return 1
        fi

    else
        cat<<EOF>&2
${prog} error: unable to truncate file 'm.db'.
EOF
        return 1
    fi
}

function series_batch_mdb_list {

    if [ -f m.db ]
    then

        for mre in $(cat m.db)
        do

            idx=$(echo ${mre} | awk -F: '{print $1}')
            msg=$(echo ${mre} | awk -F: '{print $2}' | sed 's/%/ /g')
            src=$(echo ${mre} | awk -F: '{print $3}')

            case "${1}" in
                index)
                    echo ${idx} ${src}
                    ;;
                log)
                    echo ${msg} ${src}
                    ;;
                *)
                    echo ${idx} ${src} ${msg}
                    ;;
            esac

        done
    else
        cat <<EOF>&2
$prog error: missing file 'm.db'.
EOF
        return 1
    fi
}

function series_batch_sequence_target {

    if [ -n "${1}" ]&&[ -f "${1}" ]
    then
        prefix=$(date -r "${1}" '+%Y%m%d-%H%M')

        if found=$(2>/dev/null echo "${1}" | egrep -e "^${prefix}-") && [ -n "${found}" ]
        then
            echo "${1}"
        else
            echo "${prefix}-${1}"
        fi
        return 0
    else
        return 1
    fi
}

function series_batch_sequence {

    if [ -f m.db ]&& rm -f /tmp/batch
    then
        declare idx=0
        declare msg
        declare src
        declare tgt
        declare cnt=0

        while true
        do
            rm -f /tmp/batch
            cnt=0
            for mre in $(egrep -e "^${idx}:" m.db)
            do
                msg=$(echo ${mre} | awk -F: '{print $2}' | sed 's/%/ /g')
                src=$(echo ${mre} | awk -F: '{print $3}')

                # (batch interior)
                #
                if tgt=$(series_batch_sequence_target "${src}") &&[ -n "${tgt}" ]
                then
                    echo ${src} >> /tmp/batch

                    # (batch op)
                    #
                    if git mv -f "${src}" "${tgt}"
                    then
                        git status --porcelain "${tgt}"
                    fi
                else
                    cat<<EOF>&2
$0 error from "../target.sh '${src}' -> '${tgt}'".
EOF
                    #(return 1) #(ignore)
                fi

                cnt=$(( ${cnt} + 1 ))
            done

            # (batch exterior)
            #
            if [ -f /tmp/batch ]&& batch=$(2>/dev/null cat /tmp/batch) && [ -n "${batch}" ]
            then
                git commit -m "${msg}" ${batch}
            fi
            #
            if [ 0 -lt ${cnt} ]
            then
                idx=$(( ${idx} + 1 ))
            else
                break
            fi
        done
        return 0
    else
        cat<<EOF>&2
$0 error: missing resource 'm.db', or failed to vacate '/tmp/batch'.
EOF
        return 1
    fi
}

function series_batch_index {

    case "${1}" in
        init)
            shift
            if 2>/dev/null ls ${series_circa}*.png > index.txt
            then
                return 0
            else
                return 1
            fi
            ;;
        list)
            shift
            if [ -f index.txt ]&& 2>/dev/null cat index.txt
            then
                return 0
            else
                return 1
            fi
            ;;
        count)
            shift
            if [ -f index.txt ]&& 2>/dev/null wc -l index.txt | awk '{print $1}'
            then
                return 0
            else
                return 1
            fi
            ;;
    esac
}

declare -g series_summary=${series_prefix}-${series_today}
declare -g series_summary_animation=${series_summary}.mp4

function series_batch_encode {

    if [ -f index.txt ]
    then
        if [ -d /tmp/encode ]
        then
            rm -f /tmp/encode/* 
        else
            mkdir /tmp/encode
        fi

        if cd /tmp/encode
        then
            #
            # ffmpeg requires (glob) [source prefix]
            #
            if found=$(egrep -e '^camera-' ${series_dir}/${series_circa}/index.txt) &&
                    [ -n "${found}" ]
            then
                #
                for src in $(cat ${series_dir}/${series_circa}/index.txt)
                do
                    if cp -p ${src} .
                    then
                        continue
                    else
                        return 1
                    fi
                done
            else
                #
                for base in $(cat ${series_dir}/${series_circa}/index.txt) 
                do
                    cp -p ${series_dir}/${series_circa}/${base} camera-${base}
                done
            fi


            if ffmpeg -y -framerate 1 -pattern_type glob -i "camera-*.png" ${series_dir}/${series_circa}/${summary_animation}
            then
                return 0;
            else
                return 1
            fi
        fi
    fi
    return 1
}

if series_init $* && cd ${series_dir}/${series_circa}
then
    shift
    if [ -n "${1}" ]
    then
        case "${1}" in

            batch)
                shift
                if [ -n "${1}" ]
                then
                    case "${1}" in
                        mdb)
                            shift
                            if [ -n "${1}" ]
                            then
                                case "${1}" in
                                    init)
                                        shift
                                        if series_batch_mdb_init $* 
                                        then
                                            exit 0
                                        else
                                            exit 1
                                        fi
                                        ;;
                                    list)
                                        shift
                                        if series_batch_mdb_list $* 
                                        then
                                            exit 0
                                        else
                                            exit 1
                                        fi
                                        ;;
                                    *)
                                        usage
                                        ;;
                                esac
                            else
                                usage
                            fi
                            ;;

                        seq|sequence)
                            shift
                            if series_batch_sequence $* 
                            then
                                exit 0
                            else
                                exit 1
                            fi
                            ;;
                        idx|index)
                            shift
                            if series_batch_index $* 
                            then
                                exit 0
                            else
                                exit 1
                            fi
                            ;;
                        enc|encode)
                            shift
                            if series_batch_encode $* 
                            then
                                exit 0
                            else
                                exit 1
                            fi
                            ;;
                        *)
                            usage
                            ;;
                    esac
                fi
                ;;
            circa)
                shift
                if [ -n "${1}" ]
                then
                    case "${1}" in
                        current)
                            shift
                            if series_file_current $* | sed "s%^%${series_circa}/%;"
                            then
                                exit 0
                            else
                                exit 1
                            fi
                        ;;
                        list)
                            shift
                            if series_process_list $* | sed "s%^%${series_circa}/%;"
                            then
                                exit 0
                            else
                                exit 1
                            fi
                        ;;
                        next)
                            shift
                            if series_file_next $* | sed "s%^%${series_circa}/%;"
                            then
                                exit 0
                            else
                                exit 1
                            fi
                        ;;
                    esac
                else
                    echo ${series_circa}
                    exit 0
                fi
                ;;
            compile|print)
                shift
                if series_process_compile $*
                then
                    exit 0
                else
                    exit 1
                fi
                ;;
            create)
                shift
                if series_process_create $*
                then
                    exit 0
                else
                    exit 1
                fi
                ;;
            current)
                shift
                if file=$(series_file_current $* ) && [ -n "${file}" ]
                then
                    echo ${file}
                    exit 0
                else
                    exit 1
                fi
                ;;
            dir)
                shift
                if [ -n "${1}" ]
                then
                    case "${1}" in
                        circa)
                            shift
                            echo ${series_dir}/${series_circa}
                            exit 0
                            ;;
                        current)
                            shift
                            if file=$(series_file_current $* ) && [ -n "${file}" ]
                            then
                                echo ${series_dir}/${series_circa}/${file}
                                exit 0
                            else
                                exit 1
                            fi
                            ;;
                        list)
                            shift
                            if series_process_list $* | sed "s%^%${series_dir}/${series_circa}/%;"
                            then
                                exit 0
                            else
                                exit 1
                            fi
                            ;;
                        next)
                            shift
                            if file=$(series_file_next $* ) && [ -n "${file}" ]
                            then
                                echo ${series_dir}/${series_circa}/${file}
                                exit 0
                            else
                                exit 1
                            fi
                            ;;
                        *)
                            usage
                            ;;
                    esac
                else
                    echo ${series_dir}
                    exit 0
                fi
                ;;
            list)
                shift
                if series_process_list $*
                then
                    exit 0
                else
                    exit 1
                fi
                ;;
            name)
                shift
                echo ${series_name}
                exit 0
                ;;
            next)
                shift
                if file=$(series_file_next $* ) && [ -n "${file}" ]
                then
                    echo ${file}
                    exit 0
                else
                    exit 1
                fi
                ;;
            prefix)
                shift
                echo ${series_prefix}
                exit 0
                ;;
            *)
                usage
                ;;
        esac
    else
        usage
    fi
else
    usage
fi
